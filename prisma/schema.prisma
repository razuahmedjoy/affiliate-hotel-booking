generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")

    // directUrl = env("DIRECT_URL")
}

model Address {
    id      String  @id @default(uuid())
    street  String?
    city    String?
    state   String?
    country String?
    zipCode String?

    affiliate Affiliate? @relation
    customer  Customer?  @relation

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Affiliate {
    id String @id @default(uuid())

    name        String
    email       String  @unique
    phone       String
    password    String
    uniqueCode  String  @unique @default(cuid())
    qrCodeUrl   String?
    paymentLink String?

    role      String   @default("affiliate")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    addressId String?  @unique
    address   Address? @relation(fields: [addressId], references: [id])

    InitialAffiliatePayments InitialAffiliatePayment[]
}

model Customer {
    id       String @id @default(uuid())
    name     String
    email    String @unique
    phone    String
    password String
    role     String @default("customer")

    addressId String?  @unique
    address   Address? @relation(fields: [addressId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    InitialAffiliatePayments InitialAffiliatePayment[]
}

model InitialAffiliatePayment {
    id       String  @id @default(uuid())
    status   String  @default("CREATED")
    isActive Boolean @default(true)

    transactionId String   @unique
    affiliateId   String?
    customerId    String?
    paymentLink   String?
    waitingTime   Int?
    amount        Float?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    Affiliator Affiliate? @relation(fields: [affiliateId], references: [uniqueCode])
    Customer   Customer?  @relation(fields: [customerId], references: [id])
}

model ZohoTokens {
    id            Int      @id @default(autoincrement())
    access_token  String
    refresh_token String
    expires_at    DateTime @db.Timestamp(6)  // Correct native type
    created_at    DateTime @default(now()) @db.Timestamp(6)
    updated_at    DateTime @updatedAt @db.Timestamp(6)
    is_refreshing Boolean @default(false)

    @@index([expires_at], name: "expires_at_index")
}